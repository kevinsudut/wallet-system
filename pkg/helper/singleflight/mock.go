// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/helper/singleflight/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/helper/singleflight/interfaces.go -destination=pkg/helper/singleflight/mock.go -package=singleflight
//

// Package singleflight is a generated GoMock package.
package singleflight

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSingleFlightItf is a mock of SingleFlightItf interface.
type MockSingleFlightItf struct {
	ctrl     *gomock.Controller
	recorder *MockSingleFlightItfMockRecorder
}

// MockSingleFlightItfMockRecorder is the mock recorder for MockSingleFlightItf.
type MockSingleFlightItfMockRecorder struct {
	mock *MockSingleFlightItf
}

// NewMockSingleFlightItf creates a new mock instance.
func NewMockSingleFlightItf(ctrl *gomock.Controller) *MockSingleFlightItf {
	mock := &MockSingleFlightItf{ctrl: ctrl}
	mock.recorder = &MockSingleFlightItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleFlightItf) EXPECT() *MockSingleFlightItfMockRecorder {
	return m.recorder
}

// DoSingleFlight mocks base method.
func (m *MockSingleFlightItf) DoSingleFlight(ctx context.Context, key string, fn func() (any, error)) (any, error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSingleFlight", ctx, key, fn)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// DoSingleFlight indicates an expected call of DoSingleFlight.
func (mr *MockSingleFlightItfMockRecorder) DoSingleFlight(ctx, key, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSingleFlight", reflect.TypeOf((*MockSingleFlightItf)(nil).DoSingleFlight), ctx, key, fn)
}
