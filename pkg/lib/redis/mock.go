// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/lib/redis/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/lib/redis/interfaces.go -destination=pkg/lib/redis/mock.go -package=redis
//

// Package redis is a generated GoMock package.
package redis

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRedisItf is a mock of RedisItf interface.
type MockRedisItf struct {
	ctrl     *gomock.Controller
	recorder *MockRedisItfMockRecorder
}

// MockRedisItfMockRecorder is the mock recorder for MockRedisItf.
type MockRedisItfMockRecorder struct {
	mock *MockRedisItf
}

// NewMockRedisItf creates a new mock instance.
func NewMockRedisItf(ctrl *gomock.Controller) *MockRedisItf {
	mock := &MockRedisItf{ctrl: ctrl}
	mock.recorder = &MockRedisItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisItf) EXPECT() *MockRedisItfMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRedisItf) Delete(ctx context.Context, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisItfMockRecorder) Delete(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisItf)(nil).Delete), varargs...)
}

// Fetch mocks base method.
func (m *MockRedisItf) Fetch(ctx context.Context, key string, expiration time.Duration, fetch func() (any, error)) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, key, expiration, fetch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockRedisItfMockRecorder) Fetch(ctx, key, expiration, fetch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRedisItf)(nil).Fetch), ctx, key, expiration, fetch)
}

// Get mocks base method.
func (m *MockRedisItf) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisItfMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisItf)(nil).Get), ctx, key)
}

// SetEx mocks base method.
func (m *MockRedisItf) SetEx(ctx context.Context, key string, value any, expiration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEx", ctx, key, value, expiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEx indicates an expected call of SetEx.
func (mr *MockRedisItfMockRecorder) SetEx(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEx", reflect.TypeOf((*MockRedisItf)(nil).SetEx), ctx, key, value, expiration)
}
