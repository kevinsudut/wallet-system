// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/lib/database/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/lib/database/interfaces.go -destination=pkg/lib/database/mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseItf is a mock of DatabaseItf interface.
type MockDatabaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseItfMockRecorder
}

// MockDatabaseItfMockRecorder is the mock recorder for MockDatabaseItf.
type MockDatabaseItfMockRecorder struct {
	mock *MockDatabaseItf
}

// NewMockDatabaseItf creates a new mock instance.
func NewMockDatabaseItf(ctrl *gomock.Controller) *MockDatabaseItf {
	mock := &MockDatabaseItf{ctrl: ctrl}
	mock.recorder = &MockDatabaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseItf) EXPECT() *MockDatabaseItfMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDatabaseItf) Begin() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockDatabaseItfMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDatabaseItf)(nil).Begin))
}

// Commit mocks base method.
func (m *MockDatabaseItf) Commit(tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDatabaseItfMockRecorder) Commit(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDatabaseItf)(nil).Commit), tx)
}

// ExecContextStmt mocks base method.
func (m *MockDatabaseItf) ExecContextStmt(ctx context.Context, stmt *sqlx.Stmt, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, stmt}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContextStmt", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecContextStmt indicates an expected call of ExecContextStmt.
func (mr *MockDatabaseItfMockRecorder) ExecContextStmt(ctx, stmt any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, stmt}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContextStmt", reflect.TypeOf((*MockDatabaseItf)(nil).ExecContextStmt), varargs...)
}

// ExecContextStmtTx mocks base method.
func (m *MockDatabaseItf) ExecContextStmtTx(ctx context.Context, tx *sql.Tx, stmt *sqlx.Stmt, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, stmt}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContextStmtTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecContextStmtTx indicates an expected call of ExecContextStmtTx.
func (mr *MockDatabaseItfMockRecorder) ExecContextStmtTx(ctx, tx, stmt any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, stmt}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContextStmtTx", reflect.TypeOf((*MockDatabaseItf)(nil).ExecContextStmtTx), varargs...)
}

// GetContextStmt mocks base method.
func (m *MockDatabaseItf) GetContextStmt(ctx context.Context, stmt *sqlx.Stmt, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, stmt, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextStmt", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContextStmt indicates an expected call of GetContextStmt.
func (mr *MockDatabaseItfMockRecorder) GetContextStmt(ctx, stmt, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, stmt, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextStmt", reflect.TypeOf((*MockDatabaseItf)(nil).GetContextStmt), varargs...)
}

// PreparexContext mocks base method.
func (m *MockDatabaseItf) PreparexContext(ctx context.Context, query string) *sqlx.Stmt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreparexContext", ctx, query)
	ret0, _ := ret[0].(*sqlx.Stmt)
	return ret0
}

// PreparexContext indicates an expected call of PreparexContext.
func (mr *MockDatabaseItfMockRecorder) PreparexContext(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparexContext", reflect.TypeOf((*MockDatabaseItf)(nil).PreparexContext), ctx, query)
}

// Rollback mocks base method.
func (m *MockDatabaseItf) Rollback(tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDatabaseItfMockRecorder) Rollback(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDatabaseItf)(nil).Rollback), tx)
}

// SelectContextStmt mocks base method.
func (m *MockDatabaseItf) SelectContextStmt(ctx context.Context, stmt *sqlx.Stmt, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, stmt, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContextStmt", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContextStmt indicates an expected call of SelectContextStmt.
func (mr *MockDatabaseItfMockRecorder) SelectContextStmt(ctx, stmt, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, stmt, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContextStmt", reflect.TypeOf((*MockDatabaseItf)(nil).SelectContextStmt), varargs...)
}
