// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/lib/database/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/lib/database/interfaces.go -destination=pkg/lib/database/mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseItf is a mock of DatabaseItf interface.
type MockDatabaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseItfMockRecorder
}

// MockDatabaseItfMockRecorder is the mock recorder for MockDatabaseItf.
type MockDatabaseItfMockRecorder struct {
	mock *MockDatabaseItf
}

// NewMockDatabaseItf creates a new mock instance.
func NewMockDatabaseItf(ctrl *gomock.Controller) *MockDatabaseItf {
	mock := &MockDatabaseItf{ctrl: ctrl}
	mock.recorder = &MockDatabaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseItf) EXPECT() *MockDatabaseItfMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDatabaseItf) Begin() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockDatabaseItfMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDatabaseItf)(nil).Begin))
}

// ExecContext mocks base method.
func (m *MockDatabaseItf) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDatabaseItfMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDatabaseItf)(nil).ExecContext), varargs...)
}

// ExecContextTx mocks base method.
func (m *MockDatabaseItf) ExecContextTx(ctx context.Context, tx *sql.Tx, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContextTx", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContextTx indicates an expected call of ExecContextTx.
func (mr *MockDatabaseItfMockRecorder) ExecContextTx(ctx, tx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContextTx", reflect.TypeOf((*MockDatabaseItf)(nil).ExecContextTx), varargs...)
}

// GetContext mocks base method.
func (m *MockDatabaseItf) GetContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockDatabaseItfMockRecorder) GetContext(ctx, dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockDatabaseItf)(nil).GetContext), varargs...)
}

// PreparexContext mocks base method.
func (m *MockDatabaseItf) PreparexContext(ctx context.Context, query string) *sqlx.Stmt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreparexContext", ctx, query)
	ret0, _ := ret[0].(*sqlx.Stmt)
	return ret0
}

// PreparexContext indicates an expected call of PreparexContext.
func (mr *MockDatabaseItfMockRecorder) PreparexContext(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparexContext", reflect.TypeOf((*MockDatabaseItf)(nil).PreparexContext), ctx, query)
}

// SelectContext mocks base method.
func (m *MockDatabaseItf) SelectContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockDatabaseItfMockRecorder) SelectContext(ctx, dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockDatabaseItf)(nil).SelectContext), varargs...)
}
