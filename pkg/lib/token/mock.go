// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/lib/token/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/lib/token/interfaces.go -destination=pkg/lib/token/mock.go -package=token
//

// Package token is a generated GoMock package.
package token

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenItf is a mock of TokenItf interface.
type MockTokenItf struct {
	ctrl     *gomock.Controller
	recorder *MockTokenItfMockRecorder
}

// MockTokenItfMockRecorder is the mock recorder for MockTokenItf.
type MockTokenItfMockRecorder struct {
	mock *MockTokenItf
}

// NewMockTokenItf creates a new mock instance.
func NewMockTokenItf(ctrl *gomock.Controller) *MockTokenItf {
	mock := &MockTokenItf{ctrl: ctrl}
	mock.recorder = &MockTokenItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenItf) EXPECT() *MockTokenItfMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTokenItf) Create(ttl time.Duration, content any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ttl, content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTokenItfMockRecorder) Create(ttl, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTokenItf)(nil).Create), ttl, content)
}

// Validate mocks base method.
func (m *MockTokenItf) Validate(token string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", token)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenItfMockRecorder) Validate(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenItf)(nil).Validate), token)
}
