// Code generated by MockGen. DO NOT EDIT.
// Source: app/handler/template/template.go
//
// Generated by this command:
//
//	mockgen -source=app/handler/template/template.go -destination=app/handler/template/mock.go -package=handlertemplate
//

// Package handlertemplate is a generated GoMock package.
package handlertemplate

import (
	reflect "reflect"

	mux "github.com/gorilla/mux"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlerItf is a mock of HandlerItf interface.
type MockHandlerItf struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerItfMockRecorder
}

// MockHandlerItfMockRecorder is the mock recorder for MockHandlerItf.
type MockHandlerItfMockRecorder struct {
	mock *MockHandlerItf
}

// NewMockHandlerItf creates a new mock instance.
func NewMockHandlerItf(ctrl *gomock.Controller) *MockHandlerItf {
	mock := &MockHandlerItf{ctrl: ctrl}
	mock.recorder = &MockHandlerItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerItf) EXPECT() *MockHandlerItfMockRecorder {
	return m.recorder
}

// RegisterHandlers mocks base method.
func (m *MockHandlerItf) RegisterHandlers(router *mux.Router) *mux.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHandlers", router)
	ret0, _ := ret[0].(*mux.Router)
	return ret0
}

// RegisterHandlers indicates an expected call of RegisterHandlers.
func (mr *MockHandlerItfMockRecorder) RegisterHandlers(router any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandlers", reflect.TypeOf((*MockHandlerItf)(nil).RegisterHandlers), router)
}
