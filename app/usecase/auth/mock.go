// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/auth/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=app/usecase/auth/interfaces.go -destination=app/usecase/auth/mock.go -package=usecaseauth
//

// Package usecaseauth is a generated GoMock package.
package usecaseauth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUsecaseItf is a mock of UsecaseItf interface.
type MockUsecaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseItfMockRecorder
}

// MockUsecaseItfMockRecorder is the mock recorder for MockUsecaseItf.
type MockUsecaseItfMockRecorder struct {
	mock *MockUsecaseItf
}

// NewMockUsecaseItf creates a new mock instance.
func NewMockUsecaseItf(ctrl *gomock.Controller) *MockUsecaseItf {
	mock := &MockUsecaseItf{ctrl: ctrl}
	mock.recorder = &MockUsecaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseItf) EXPECT() *MockUsecaseItfMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockUsecaseItf) RegisterUser(ctx context.Context, req RegisterUserRequest) (RegisterUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, req)
	ret0, _ := ret[0].(RegisterUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUsecaseItfMockRecorder) RegisterUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUsecaseItf)(nil).RegisterUser), ctx, req)
}
