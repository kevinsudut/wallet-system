// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/balance/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=app/usecase/balance/interfaces.go -destination=app/usecase/balance/mock.go -package=usecasebalance
//

// Package usecasebalance is a generated GoMock package.
package usecasebalance

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUsecaseItf is a mock of UsecaseItf interface.
type MockUsecaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseItfMockRecorder
}

// MockUsecaseItfMockRecorder is the mock recorder for MockUsecaseItf.
type MockUsecaseItfMockRecorder struct {
	mock *MockUsecaseItf
}

// NewMockUsecaseItf creates a new mock instance.
func NewMockUsecaseItf(ctrl *gomock.Controller) *MockUsecaseItf {
	mock := &MockUsecaseItf{ctrl: ctrl}
	mock.recorder = &MockUsecaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseItf) EXPECT() *MockUsecaseItfMockRecorder {
	return m.recorder
}

// ReadBalanceByUsername mocks base method.
func (m *MockUsecaseItf) ReadBalanceByUsername(ctx context.Context, req ReadBalanceByUsernameRequest) (ReadBalanceByUsernameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBalanceByUsername", ctx, req)
	ret0, _ := ret[0].(ReadBalanceByUsernameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBalanceByUsername indicates an expected call of ReadBalanceByUsername.
func (mr *MockUsecaseItfMockRecorder) ReadBalanceByUsername(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBalanceByUsername", reflect.TypeOf((*MockUsecaseItf)(nil).ReadBalanceByUsername), ctx, req)
}

// TopupBalance mocks base method.
func (m *MockUsecaseItf) TopupBalance(ctx context.Context, req TopupBalanceRequest) (TopupBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopupBalance", ctx, req)
	ret0, _ := ret[0].(TopupBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopupBalance indicates an expected call of TopupBalance.
func (mr *MockUsecaseItfMockRecorder) TopupBalance(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopupBalance", reflect.TypeOf((*MockUsecaseItf)(nil).TopupBalance), ctx, req)
}

// TransferBalance mocks base method.
func (m *MockUsecaseItf) TransferBalance(ctx context.Context, req TransferBalanceRequest) (TransferBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferBalance", ctx, req)
	ret0, _ := ret[0].(TransferBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferBalance indicates an expected call of TransferBalance.
func (mr *MockUsecaseItfMockRecorder) TransferBalance(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferBalance", reflect.TypeOf((*MockUsecaseItf)(nil).TransferBalance), ctx, req)
}
