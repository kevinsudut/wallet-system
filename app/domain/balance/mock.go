// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/balance/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=app/domain/balance/interfaces.go -destination=app/domain/balance/mock.go -package=domainbalance
//

// Package domainbalance is a generated GoMock package.
package domainbalance

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDomainItf is a mock of DomainItf interface.
type MockDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockDomainItfMockRecorder
}

// MockDomainItfMockRecorder is the mock recorder for MockDomainItf.
type MockDomainItfMockRecorder struct {
	mock *MockDomainItf
}

// NewMockDomainItf creates a new mock instance.
func NewMockDomainItf(ctrl *gomock.Controller) *MockDomainItf {
	mock := &MockDomainItf{ctrl: ctrl}
	mock.recorder = &MockDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainItf) EXPECT() *MockDomainItfMockRecorder {
	return m.recorder
}

// DisburmentBalance mocks base method.
func (m *MockDomainItf) DisburmentBalance(ctx context.Context, req DisburmentBalanceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisburmentBalance", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisburmentBalance indicates an expected call of DisburmentBalance.
func (mr *MockDomainItfMockRecorder) DisburmentBalance(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisburmentBalance", reflect.TypeOf((*MockDomainItf)(nil).DisburmentBalance), ctx, req)
}

// GetBalanceByUsername mocks base method.
func (m *MockDomainItf) GetBalanceByUsername(ctx context.Context, username string) (Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUsername", ctx, username)
	ret0, _ := ret[0].(Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUsername indicates an expected call of GetBalanceByUsername.
func (mr *MockDomainItfMockRecorder) GetBalanceByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUsername", reflect.TypeOf((*MockDomainItf)(nil).GetBalanceByUsername), ctx, username)
}

// GrantBalanceByUsername mocks base method.
func (m *MockDomainItf) GrantBalanceByUsername(ctx context.Context, balance Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantBalanceByUsername", ctx, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantBalanceByUsername indicates an expected call of GrantBalanceByUsername.
func (mr *MockDomainItfMockRecorder) GrantBalanceByUsername(ctx, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantBalanceByUsername", reflect.TypeOf((*MockDomainItf)(nil).GrantBalanceByUsername), ctx, balance)
}
